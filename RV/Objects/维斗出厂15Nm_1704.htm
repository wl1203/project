<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\维斗出厂15Nm_1704.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\维斗出厂15Nm_1704.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Thu Aug 16 10:27:31 2018
<BR><P>
<H3>Maximum Stack Usage =        552 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; RunFirst &rArr; Manual0 &rArr; Manual &rArr; DownLoadProg2 &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[6f]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">NMI_Handler</a><BR>
 <LI><a href="#[6]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">HardFault_Handler</a><BR>
 <LI><a href="#[7]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">MemManage_Handler</a><BR>
 <LI><a href="#[8]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">BusFault_Handler</a><BR>
 <LI><a href="#[9]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">UsageFault_Handler</a><BR>
 <LI><a href="#[a]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SVC_Handler</a><BR>
 <LI><a href="#[b]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">DebugMon_Handler</a><BR>
 <LI><a href="#[c]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">PendSV_Handler</a><BR>
 <LI><a href="#[d]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">SysTick_Handler</a><BR>
 <LI><a href="#[24]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[24]">ADC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[25]">BOD_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[8]">BusFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[30]">CANActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[27]">CAN_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[28]">DMA_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[b]">DebugMon_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[20]">EINT0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[21]">EINT1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[22]">EINT2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[23]">EINT3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2a]">ENET_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[18]">I2C0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[19]">I2C1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[29]">I2S_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1a]">IRQ_I2C</a> from i2c.o(i.IRQ_I2C) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1a]">IRQ_I2C</a> from i2c.o(i.IRQ_I2C) referenced from i2c.o(i.I2C_Init)
 <LI><a href="#[2c]">MCPWM_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[7]">MemManage_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1e]">PLL0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2e]">PLL1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[17]">PWM1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[c]">PendSV_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2d]">QEI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2b]">RIT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1f]">RTC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1b]">SPI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1c]">SSP0_Isr</a> from cs5460.o(i.SSP0_Isr) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1c]">SSP0_Isr</a> from cs5460.o(i.SSP0_Isr) referenced from hal.o(i.SpiInit)
 <LI><a href="#[1d]">SSP1_Isr</a> from cs5460.o(i.SSP1_Isr) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1d]">SSP1_Isr</a> from cs5460.o(i.SSP1_Isr) referenced from hal.o(i.SpiInit)
 <LI><a href="#[a]">SVC_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[d]">SysTick_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[10]">TIMER1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[11]">TIMER2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[12]">TIMER3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[f]">Timer0Isr</a> from main.o(i.Timer0Isr) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[f]">Timer0Isr</a> from main.o(i.Timer0Isr) referenced from hal.o(i.timer0Init)
 <LI><a href="#[15]">UART2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[16]">UART3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2f]">USBActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[26]">USB_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[13]">Uart0Isr</a> from main.o(i.Uart0Isr) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[13]">Uart0Isr</a> from main.o(i.Uart0Isr) referenced from hal.o(i.uartInit)
 <LI><a href="#[14]">Uart1Isr</a> from main.o(i.Uart1Isr) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[14]">Uart1Isr</a> from main.o(i.Uart1Isr) referenced from hal.o(i.uartInit)
 <LI><a href="#[9]">UsageFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[e]">WDT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[38]">__main</a> from __main.o(!!!main) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[37]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[33]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[35]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[34]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[32]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[36]">isspace</a> from isspace.o(.text) referenced from strtod.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[38]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[39]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[3b]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[12b]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[12c]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[12d]"></a>__decompress</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[12e]"></a>__decompress0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[12f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[3c]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[55]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[3e]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[130]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[48]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[131]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[132]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[40]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[133]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[134]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[135]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[136]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[42]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[137]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[138]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[43]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[139]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[13a]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[13b]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[13c]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[13d]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[13e]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[13f]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[140]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[141]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[142]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[143]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[144]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[145]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[4d]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[146]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[147]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[148]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[149]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[14a]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[14b]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[14c]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[3a]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[14d]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[45]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[47]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[14e]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[49]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; RunFirst &rArr; Manual0 &rArr; Manual &rArr; DownLoadProg2 &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[14f]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[77]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4c]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[150]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[4e]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[10a]"></a>zyIrqDisable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2c.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIsrSet
</UL>

<P><STRONG><a name="[10b]"></a>zyIrqEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2c.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIsrSet
</UL>

<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[151]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[29]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[152]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[10]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[155]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[15]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[50]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showCalib
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayPID2
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayPID
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPower
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPID
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibTorque
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibDynamo
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showManualSeting
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showConstSet
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_out
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_line2
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartMotor
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTest1
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMotor
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance2
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerforStep
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualSeting
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoNext
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPG11
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPG00
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest2
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest1
</UL>

<P><STRONG><a name="[5d]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[5e]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[3f]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[157]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[15a]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>SetDynamo</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setting.o(i.SetDynamo))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFirst
</UL>

<P><STRONG><a name="[15e]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>__printf</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[56]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPID
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaAccess
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPID
</UL>

<P><STRONG><a name="[59]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[15f]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaAccess
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoadProg2
</UL>

<P><STRONG><a name="[160]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[5b]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __read_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[5c]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[52]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[162]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[51]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[32]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[6a]"></a>__strtod_int</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[58]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[163]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[164]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[41]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[64]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[36]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[67]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[34]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[35]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[60]"></a>_btod_etento</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[46]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[6d]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[73]"></a>_scanf_really_real</STRONG> (Thumb, 668 bytes, Stack size 120 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>

<P><STRONG><a name="[4b]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[10c]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[78]"></a>_scanf_really_hex_real</STRONG> (Thumb, 786 bytes, Stack size 80 bytes, scanf_hexfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _scanf_really_hex_real &rArr; __support_ldexp &rArr; ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
</UL>

<P><STRONG><a name="[12a]"></a>_scanf_really_infnan</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, scanf_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
</UL>

<P><STRONG><a name="[4f]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[165]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7c]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[7b]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[7f]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[7d]"></a>_e2d</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, btod.o(CL$$btod_e2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
</UL>

<P><STRONG><a name="[7e]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>

<P><STRONG><a name="[62]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[72]"></a>_btod_edivd</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_edivd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _btod_edivd &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[63]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[71]"></a>_btod_emuld</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emuld))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _btod_emuld &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[80]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[f1]"></a>AccessChar</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lcd.o(i.AccessChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AccessChar
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrLcdD
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrLcdC
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;awLcdD
</UL>

<P><STRONG><a name="[81]"></a>Bell</STRONG> (Thumb, 156 bytes, Stack size 4 bytes, hal.o(i.Bell))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Bell
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib03
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPower
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPID
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassWord
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibTorque
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibDynamo
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFirst
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpLoadProg
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartMotor
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTest1
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunFirst
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance2
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance1
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualSeting
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual0
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoNext
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoadProg
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest2
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest1
</UL>

<P><STRONG><a name="[83]"></a>CalibDynamo</STRONG> (Thumb, 682 bytes, Stack size 16 bytes, setting.o(i.CalibDynamo))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = CalibDynamo &rArr; RunMotor &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putBuff
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Key
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMotor
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataAccess
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verString
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putString
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showSet0
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showDynaCalib
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ResultV
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ResultM
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFirst
</UL>

<P><STRONG><a name="[8f]"></a>CalibTorque</STRONG> (Thumb, 758 bytes, Stack size 16 bytes, setting.o(i.CalibTorque))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = CalibTorque &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showCalib
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Key
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISendStr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMotor
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataAccess
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showScale
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showCalib01
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ResultV
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ResultM
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib03
</UL>

<P><STRONG><a name="[9d]"></a>Calib_M_Zero</STRONG> (Thumb, 226 bytes, Stack size 4 bytes, cs5460.o(i.Calib_M_Zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Calib_M_Zero &rArr; Torque_DRDY_High
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_R_Torque4
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_R_Torque1
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Torque_DRDY_High
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib03
</UL>

<P><STRONG><a name="[a1]"></a>ConstantTest0</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(i.ConstantTest0))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ConstantTest0 &rArr; ConstantTest1 &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest2
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest1
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunFirst
</UL>

<P><STRONG><a name="[a2]"></a>ConstantTest1</STRONG> (Thumb, 2756 bytes, Stack size 16 bytes, main.o(i.ConstantTest1))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = ConstantTest1 &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Key
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISendStr
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRcvStr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showConstSet
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_out
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMotor
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataAccess
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showRun0
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showConstant2
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showConstant1
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ResultV
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ResultM
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest0
</UL>

<P><STRONG><a name="[a3]"></a>ConstantTest2</STRONG> (Thumb, 3700 bytes, Stack size 16 bytes, main.o(i.ConstantTest2))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = ConstantTest2 &rArr; StartMotor &rArr; s_out &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putBuff
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Key
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showConstSet
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_out
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartMotor
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMotor
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPG11
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPG00
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataAccess
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_tune
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_calc
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verString
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putString
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showRun0
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPG00
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showConstant2
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showConstant1
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ResultV
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ResultM
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest0
</UL>

<P><STRONG><a name="[8e]"></a>DataAccess</STRONG> (Thumb, 966 bytes, Stack size 40 bytes, main.o(i.DataAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DataAccess &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib03
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPower
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPID
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassWord
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibTorque
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibDynamo
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFirst
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartMotor
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTest1
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunFirst
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance2
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance1
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest2
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest1
</UL>

<P><STRONG><a name="[82]"></a>Delay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal.o(i.Delay))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib03
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPower
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPID
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibTorque
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_5460V
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_5460M
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTest1
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance2
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualSeting
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoadProg2
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoadProg
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest2
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest1
</UL>

<P><STRONG><a name="[af]"></a>DispPG00</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, main.o(i.DispPG00))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = DispPG00 &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putBuff
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFirst
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTest1
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunFirst
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance2
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest2
</UL>

<P><STRONG><a name="[ad]"></a>DispPG11</STRONG> (Thumb, 388 bytes, Stack size 32 bytes, main.o(i.DispPG11))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = DispPG11 &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putBuff
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putString
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartMotor
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTest1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStep
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance2
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest2
</UL>

<P><STRONG><a name="[b5]"></a>DownLoadProg</STRONG> (Thumb, 366 bytes, Stack size 16 bytes, main.o(i.DownLoadProg))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = DownLoadProg &rArr; ParaAccess &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaAccess
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISendStr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putString
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>DownLoadProg2</STRONG> (Thumb, 1266 bytes, Stack size 56 bytes, main.o(i.DownLoadProg2))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = DownLoadProg2 &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISendStr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual
</UL>

<P><STRONG><a name="[ba]"></a>GoNext</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, main.o(i.GoNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = GoNext &rArr; RunStep &rArr; StartMotor &rArr; s_out &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStep
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMotor
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out_PWM
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verString
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putString
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTest1
</UL>

<P><STRONG><a name="[bd]"></a>I2C_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, i2c.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_Init &rArr; zyIsrSet
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIsrSet
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a]"></a>IRQ_I2C</STRONG> (Thumb, 516 bytes, Stack size 0 bytes, i2c.o(i.IRQ_I2C))
<BR>[Address Reference Count : 2]<UL><LI> i2c.o(i.I2C_Init)
<LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>IRcvStr</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, i2c.o(i.IRcvStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRcvStr
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_I2c_End
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReLoad2
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualSeting
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest1
</UL>

<P><STRONG><a name="[9a]"></a>ISendStr</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, i2c.o(i.ISendStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ISendStr
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_I2c_End
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib03
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPID
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibTorque
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualSeting
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoadProg2
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoadProg
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest1
</UL>

<P><STRONG><a name="[105]"></a>Init_QEI</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, hal.o(i.Init_QEI))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c0]"></a>Manual</STRONG> (Thumb, 2910 bytes, Stack size 32 bytes, main.o(i.Manual))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = Manual &rArr; DownLoadProg2 &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putBuff
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Key
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRcvStr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_out
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartMotor
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMotor
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoadProg2
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPG11
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPG00
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataAccess
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verString
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putString
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putEng
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showRun0
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPG_Manual0
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPG_Manual
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPG00
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ResultV
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ResultM
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual0
</UL>

<P><STRONG><a name="[c4]"></a>Manual0</STRONG> (Thumb, 250 bytes, Stack size 8 bytes, main.o(i.Manual0))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = Manual0 &rArr; Manual &rArr; DownLoadProg2 &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Key
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualSeting
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verEng
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putEng
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showRun0
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPG_Manual0
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunFirst
</UL>

<P><STRONG><a name="[c6]"></a>ManualSeting</STRONG> (Thumb, 830 bytes, Stack size 16 bytes, main.o(i.ManualSeting))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = ManualSeting &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Key
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISendStr
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRcvStr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showManualSeting
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPG_Manual0
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualSetingDisplay
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual0
</UL>

<P><STRONG><a name="[c7]"></a>ManualSetingDisplay</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, display.o(i.ManualSetingDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ManualSetingDisplay &rArr; verString &rArr; verEng &rArr; dComd &rArr; wrLcdD &rArr; AccessChar
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verString
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putString
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putHLine
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_Lcd
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualSeting
</UL>

<P><STRONG><a name="[bc]"></a>Out_PWM</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, hal.o(i.Out_PWM))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTest1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStep
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance2
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerforStep
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoNext
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_calc
</UL>

<P><STRONG><a name="[103]"></a>PWM_Init</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, hal.o(i.PWM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>ParaAccess</STRONG> (Thumb, 1420 bytes, Stack size 48 bytes, setting.o(i.ParaAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = ParaAccess &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPID
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTest1
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance1
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoadProg
</UL>

<P><STRONG><a name="[cb]"></a>PassWord</STRONG> (Thumb, 438 bytes, Stack size 8 bytes, setting.o(i.PassWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PassWord &rArr; showPassWord &rArr; verString &rArr; verEng &rArr; dComd &rArr; wrLcdD &rArr; AccessChar
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Key
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataAccess
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verEng
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putEng
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPassWord
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ResultV
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ResultM
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate
</UL>

<P><STRONG><a name="[cd]"></a>PerforStep</STRONG> (Thumb, 606 bytes, Stack size 32 bytes, main.o(i.PerforStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = PerforStep &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putBuff
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out_PWM
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putString
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance2
</UL>

<P><STRONG><a name="[d0]"></a>Performance</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(i.Performance))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = Performance &rArr; Performance1 &rArr; ParaAccess &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance2
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance1
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunFirst
</UL>

<P><STRONG><a name="[d1]"></a>Performance1</STRONG> (Thumb, 414 bytes, Stack size 8 bytes, main.o(i.Performance1))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = Performance1 &rArr; ParaAccess &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Key
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaAccess
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPerfoSet
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_out
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMotor
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReLoad2
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataAccess
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showRun0
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPerfomance2
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPerfomance1
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ResultV
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ResultM
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance
</UL>

<P><STRONG><a name="[d2]"></a>Performance2</STRONG> (Thumb, 3246 bytes, Stack size 32 bytes, main.o(i.Performance2))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = Performance2 &rArr; StartMotor &rArr; s_out &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_bumpless
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Key
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPerfoSet
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_out
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpLoadProg
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartMotor
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMotor
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerforStep
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPG11
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPG00
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataAccess
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out_PWM
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_tune
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_calc
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verString
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putString
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putEng
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showRun0
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPerfomance2
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPerfomance1
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPG00
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ResultV
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ResultM
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance
</UL>

<P><STRONG><a name="[d3]"></a>ReLoad2</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, main.o(i.ReLoad2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ReLoad2 &rArr; IRcvStr
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRcvStr
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPID
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpLoadProg
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTest1
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance1
</UL>

<P><STRONG><a name="[88]"></a>Read_Key</STRONG> (Thumb, 564 bytes, Stack size 8 bytes, hal.o(i.Read_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Read_Key
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib03
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPower
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPID
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassWord
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibTorque
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibDynamo
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFirst
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartMotor
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTest1
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunFirst
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance2
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance1
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualSeting
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual0
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest2
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest1
</UL>

<P><STRONG><a name="[dd]"></a>Read_Posi</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, hal.o(i.Read_Posi))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTest1
</UL>

<P><STRONG><a name="[8c]"></a>Read_ResultM</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, cs5460.o(i.Read_ResultM))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPower
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPID
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassWord
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibTorque
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibDynamo
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFirst
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartMotor
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTest1
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunFirst
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance2
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance1
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest2
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest1
</UL>

<P><STRONG><a name="[8d]"></a>Read_ResultV</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, cs5460.o(i.Read_ResultV))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Read_ResultV
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPower
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPID
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassWord
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibTorque
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibDynamo
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFirst
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartMotor
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTest1
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunFirst
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance2
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance1
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest2
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest1
</UL>

<P><STRONG><a name="[d9]"></a>RunFirst</STRONG> (Thumb, 586 bytes, Stack size 8 bytes, main.o(i.RunFirst))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = RunFirst &rArr; Manual0 &rArr; Manual &rArr; DownLoadProg2 &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Key
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_out
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTest1
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual0
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPG00
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataAccess
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest0
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verEng
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putEng
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showRun0
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPG00
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ResultV
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ResultM
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>RunMotor</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, main.o(i.RunMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = RunMotor &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPower
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPID
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibTorque
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibDynamo
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartMotor
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTest1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStep
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance2
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance1
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoNext
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest2
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest1
</UL>

<P><STRONG><a name="[db]"></a>RunPID</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, setting.o(i.RunPID))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RunPID &rArr; pid_tune &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_tune
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verString
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putString
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPID
</UL>

<P><STRONG><a name="[bb]"></a>RunStep</STRONG> (Thumb, 1260 bytes, Stack size 32 bytes, main.o(i.RunStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = RunStep &rArr; StartMotor &rArr; s_out &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartMotor
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMotor
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPG11
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out_PWM
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verString
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putString
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTest1
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoNext
</UL>

<P><STRONG><a name="[da]"></a>RunTest1</STRONG> (Thumb, 2482 bytes, Stack size 32 bytes, main.o(i.RunTest1))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = RunTest1 &rArr; ParaAccess &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Key
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaAccess
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_out
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpLoadProg
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStep
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMotor
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReLoad2
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoNext
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPG11
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPG00
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataAccess
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out_PWM
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_tune
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_calc
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Posi
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verString
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putString
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showRun0
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPGRun1
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPG00
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ResultV
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ResultM
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunFirst
</UL>

<P><STRONG><a name="[1c]"></a>SSP0_Isr</STRONG> (Thumb, 304 bytes, Stack size 0 bytes, cs5460.o(i.SSP0_Isr))
<BR>[Address Reference Count : 2]<UL><LI> hal.o(i.SpiInit)
<LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SSP1_Isr</STRONG> (Thumb, 652 bytes, Stack size 16 bytes, cs5460.o(i.SSP1_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SSP1_Isr &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Address Reference Count : 2]<UL><LI> hal.o(i.SpiInit)
<LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[de]"></a>SetFirst</STRONG> (Thumb, 398 bytes, Stack size 8 bytes, setting.o(i.SetFirst))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = SetFirst &rArr; SetPID &rArr; ParaAccess &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPower
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPID
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDynamo
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibDynamo
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Key
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPG00
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataAccess
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verEng
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putEng
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showSet0
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPG00
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ResultV
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ResultM
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[df]"></a>SetPID</STRONG> (Thumb, 2654 bytes, Stack size 24 bytes, setting.o(i.SetPID))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = SetPID &rArr; ParaAccess &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayPID2
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayPID
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkPID
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunPID
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Key
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaAccess
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISendStr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_out
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMotor
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReLoad2
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataAccess
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_calc
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putString
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showSet0
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPID
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ResultV
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ResultM
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFirst
</UL>

<P><STRONG><a name="[e1]"></a>SetPower</STRONG> (Thumb, 504 bytes, Stack size 16 bytes, setting.o(i.SetPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = SetPower &rArr; RunMotor &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putBuff
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Key
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMotor
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataAccess
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verString
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putEng
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showSet0
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPower
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ResultV
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ResultM
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFirst
</UL>

<P><STRONG><a name="[e8]"></a>SpiInit</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, hal.o(i.SpiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SpiInit &rArr; zyIsrSet
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIsrSet
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ae]"></a>StartMotor</STRONG> (Thumb, 728 bytes, Stack size 40 bytes, main.o(i.StartMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = StartMotor &rArr; s_out &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putBuff
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Key
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_out
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMotor
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPG11
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataAccess
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putString
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ResultV
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ResultM
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStep
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance2
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest2
</UL>

<P><STRONG><a name="[f]"></a>Timer0Isr</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, main.o(i.Timer0Isr))
<BR>[Address Reference Count : 2]<UL><LI> hal.o(i.timer0Init)
<LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>Torque_DRDY_High</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, cs5460.o(i.Torque_DRDY_High))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Torque_DRDY_High
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_R_Torque4
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calib_M_Zero
</UL>

<P><STRONG><a name="[13]"></a>Uart0Isr</STRONG> (Thumb, 362 bytes, Stack size 12 bytes, main.o(i.Uart0Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Uart0Isr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> hal.o(i.uartInit)
<LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>Uart1Isr</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, main.o(i.Uart1Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart1Isr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> hal.o(i.uartInit)
<LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d8]"></a>UpLoadProg</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, main.o(i.UpLoadProg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UpLoadProg &rArr; ReLoad2 &rArr; IRcvStr
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReLoad2
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTest1
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance2
</UL>

<P><STRONG><a name="[9f]"></a>W_R_Torque1</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, cs5460.o(i.W_R_Torque1))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calib_M_Zero
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_5460M
</UL>

<P><STRONG><a name="[9e]"></a>W_R_Torque4</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, cs5460.o(i.W_R_Torque4))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calib_M_Zero
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_5460M
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Torque_DRDY_High
</UL>

<P><STRONG><a name="[fd]"></a>W_R_VCP1</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, cs5460.o(i.W_R_VCP1))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_5460V
</UL>

<P><STRONG><a name="[fc]"></a>W_R_VCP4</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, cs5460.o(i.W_R_VCP4))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_5460V
</UL>

<P><STRONG><a name="[bf]"></a>Wait_I2c_End</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, i2c.o(i.Wait_I2c_End))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISendStr
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRcvStr
</UL>

<P><STRONG><a name="[66]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[e9]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[eb]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[76]"></a>__mathlib_narrow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, narrow.o(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __mathlib_narrow &rArr; __mathlib_tofloat &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[ec]"></a>__mathlib_tofloat</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, narrow.o(i.__mathlib_tofloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_tofloat &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[7a]"></a>__support_ldexp</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ldexp.o(i.__support_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __support_ldexp &rArr; ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[54]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[9b]"></a>atof</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, atof.o(i.atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPID
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibTorque
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaAccess
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualSeting
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoadProg2
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest1
</UL>

<P><STRONG><a name="[f0]"></a>awLcdD</STRONG> (Thumb, 246 bytes, Stack size 12 bytes, lcd.o(i.awLcdD))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = awLcdD &rArr; AccessChar
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccessChar
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putHLine
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_Lcd
</UL>

<P><STRONG><a name="[f2]"></a>calib03</STRONG> (Thumb, 530 bytes, Stack size 8 bytes, setting.o(i.calib03))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = calib03 &rArr; CalibTorque &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calib_M_Zero
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibTorque
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Key
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISendStr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataAccess
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verString
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verEng
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putString
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putEng
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showCalib01
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showCalib00
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate
</UL>

<P><STRONG><a name="[f4]"></a>calibrate</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, setting.o(i.calibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = calibrate &rArr; calib03 &rArr; CalibTorque &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib03
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassWord
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Key
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataAccess
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPG00
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showCalib00
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ResultV
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ResultM
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e3]"></a>checkPID</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, setting.o(i.checkPID))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPID
</UL>

<P><STRONG><a name="[c9]"></a>clear_Lcd</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, lcd.o(i.clear_Lcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = clear_Lcd &rArr; dComd &rArr; wrLcdD &rArr; AccessChar
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nComd
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dComd
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;awLcdD
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Lcd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showSet0
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showScale
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showRun0
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPower
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPerfomance2
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPerfomance1
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPassWord
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPID
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPG_Manual0
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPG_Manual
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPGRun1
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPG000
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPG00
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showDynaCalib
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showConstant2
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showConstant1
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showCalib01
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showCalib00
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualSetingDisplay
</UL>

<P><STRONG><a name="[f5]"></a>dComd</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lcd.o(i.dComd))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = dComd &rArr; wrLcdD &rArr; AccessChar
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrLcdD
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrLcdC
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Lcd
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verEng
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putHLine
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putEng
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_Lcd
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verChin
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putChin
</UL>

<P><STRONG><a name="[f9]"></a>disp_line2</STRONG> (Thumb, 352 bytes, Stack size 16 bytes, main.o(i.disp_line2))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = disp_line2 &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putBuff
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putString
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPerfoSet
</UL>

<P><STRONG><a name="[e4]"></a>displayPID</STRONG> (Thumb, 892 bytes, Stack size 16 bytes, setting.o(i.displayPID))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = displayPID &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verString
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verEng
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putString
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPID
</UL>

<P><STRONG><a name="[e5]"></a>displayPID2</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, setting.o(i.displayPID2))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = displayPID2 &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putString
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPID
</UL>

<P><STRONG><a name="[ed]"></a>frexp</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = frexp
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[fa]"></a>init_5460M</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, cs5460.o(i.init_5460M))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_5460M
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_R_Torque4
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_R_Torque1
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fb]"></a>init_5460V</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, cs5460.o(i.init_5460V))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_5460V
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_R_VCP4
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W_R_VCP1
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fe]"></a>init_Lcd</STRONG> (Thumb, 242 bytes, Stack size 8 bytes, lcd.o(i.init_Lcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = init_Lcd &rArr; verString &rArr; verEng &rArr; dComd &rArr; wrLcdD &rArr; AccessChar
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verString
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putString
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_Lcd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nComd
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dComd
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ef]"></a>ldexp</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ldexp.o(i.ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[4a]"></a>main</STRONG> (Thumb, 1312 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = main &rArr; RunFirst &rArr; Manual0 &rArr; Manual &rArr; DownLoadProg2 &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;targetInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Lcd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_5460V
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_5460M
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFirst
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Key
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaAccess
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRcvStr
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bell
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_out
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpLoadProg
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTest1
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMotor
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunFirst
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReLoad2
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance2
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoadProg2
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoadProg
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPG00
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataAccess
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest2
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinInit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Posi
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_QEI
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPG000
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPG00
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ResultV
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ResultM
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[f6]"></a>nComd</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lcd.o(i.nComd))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nComd &rArr; wrLcdC &rArr; AccessChar
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrLcdC
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Lcd
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putHLine
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_Lcd
</UL>

<P><STRONG><a name="[106]"></a>pid_Proccesse</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, hal.o(i.pid_Proccesse))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pid_Proccesse &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_calc
</UL>

<P><STRONG><a name="[d7]"></a>pid_bumpless</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hal.o(i.pid_bumpless))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pid_bumpless &rArr; __aeabi_fsub
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance2
</UL>

<P><STRONG><a name="[b1]"></a>pid_calc</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, hal.o(i.pid_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pid_calc &rArr; pid_Proccesse &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_Proccesse
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out_PWM
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPID
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTest1
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance2
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest2
</UL>

<P><STRONG><a name="[b0]"></a>pid_tune</STRONG> (Thumb, 400 bytes, Stack size 56 bytes, hal.o(i.pid_tune))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pid_tune &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunPID
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTest1
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance2
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest2
</UL>

<P><STRONG><a name="[100]"></a>pinInit</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, hal.o(i.pinInit))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>putBuff</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, lcd.o(i.putBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = putBuff &rArr; putEng &rArr; dComd &rArr; wrLcdD &rArr; AccessChar
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putEng
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showCalib
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPower
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibDynamo
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_line2
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartMotor
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerforStep
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPG11
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPG00
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest2
</UL>

<P><STRONG><a name="[107]"></a>putChin</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, lcd.o(i.putChin))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = putChin &rArr; dComd &rArr; wrLcdD &rArr; AccessChar
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sComd
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dComd
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putString
</UL>

<P><STRONG><a name="[c2]"></a>putEng</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, lcd.o(i.putEng))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = putEng &rArr; dComd &rArr; wrLcdD &rArr; AccessChar
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sComd
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dComd
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib03
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPower
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassWord
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putBuff
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFirst
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunFirst
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance2
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual0
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putString
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPower
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPerfomance1
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPG_Manual
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showDynaCalib
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showConstant2
</UL>

<P><STRONG><a name="[ca]"></a>putHLine</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, lcd.o(i.putHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = putHLine &rArr; dComd &rArr; wrLcdD &rArr; AccessChar
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nComd
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dComd
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;awLcdD
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showSet0
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showScale
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showRun0
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPower
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPerfomance2
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPerfomance1
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPassWord
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPID
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPG_Manual0
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPG_Manual
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPGRun1
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPG00
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showDynaCalib
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showConstant2
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showConstant1
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showCalib01
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showCalib00
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualSetingDisplay
</UL>

<P><STRONG><a name="[8a]"></a>putString</STRONG> (Thumb, 150 bytes, Stack size 20 bytes, lcd.o(i.putString))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = putString &rArr; putEng &rArr; dComd &rArr; wrLcdD &rArr; AccessChar
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putEng
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putChin
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayPID2
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayPID
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib03
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPID
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunPID
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibDynamo
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Lcd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPerfoSet
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showManualSeting
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showConstSet
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_line2
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartMotor
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTest1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStep
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance2
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerforStep
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoNext
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoadProg
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPG11
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest2
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showSet0
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showScale
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showRun0
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPower
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPerfomance2
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPerfomance1
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPassWord
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPID
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPG_Manual0
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPG_Manual
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPGRun1
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPG000
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPG00
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showDynaCalib
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showConstant2
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showConstant1
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showCalib01
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showCalib00
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualSetingDisplay
</UL>

<P><STRONG><a name="[108]"></a>sComd</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, lcd.o(i.sComd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sComd &rArr; wrLcdD &rArr; AccessChar
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrLcdD
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrLcdC
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verEng
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putEng
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verChin
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putChin
</UL>

<P><STRONG><a name="[ab]"></a>s_out</STRONG> (Thumb, 676 bytes, Stack size 40 bytes, main.o(i.s_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = s_out &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPID
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartMotor
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTest1
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunFirst
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance2
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance1
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest2
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest1
</UL>

<P><STRONG><a name="[93]"></a>showCalib</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, setting.o(i.showCalib))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = showCalib &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putBuff
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verEng
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibTorque
</UL>

<P><STRONG><a name="[f3]"></a>showCalib00</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, display.o(i.showCalib00))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = showCalib00 &rArr; verString &rArr; verEng &rArr; dComd &rArr; wrLcdD &rArr; AccessChar
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verString
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verEng
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putString
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putHLine
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_Lcd
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib03
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate
</UL>

<P><STRONG><a name="[94]"></a>showCalib01</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, display.o(i.showCalib01))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = showCalib01 &rArr; verString &rArr; verEng &rArr; dComd &rArr; wrLcdD &rArr; AccessChar
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verString
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verEng
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putString
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putHLine
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_Lcd
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib03
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibTorque
</UL>

<P><STRONG><a name="[a8]"></a>showConstSet</STRONG> (Thumb, 1640 bytes, Stack size 16 bytes, main.o(i.showConstSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = showConstSet &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verString
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verEng
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putString
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest2
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest1
</UL>

<P><STRONG><a name="[a7]"></a>showConstant1</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, display.o(i.showConstant1))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = showConstant1 &rArr; verString &rArr; verEng &rArr; dComd &rArr; wrLcdD &rArr; AccessChar
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verString
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putString
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putHLine
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_Lcd
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest2
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest1
</UL>

<P><STRONG><a name="[aa]"></a>showConstant2</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, display.o(i.showConstant2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = showConstant2 &rArr; verString &rArr; verEng &rArr; dComd &rArr; wrLcdD &rArr; AccessChar
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verString
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putString
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putHLine
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putEng
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_Lcd
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest2
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest1
</UL>

<P><STRONG><a name="[85]"></a>showDynaCalib</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, display.o(i.showDynaCalib))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = showDynaCalib &rArr; verString &rArr; verEng &rArr; dComd &rArr; wrLcdD &rArr; AccessChar
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verString
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putString
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putHLine
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putEng
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_Lcd
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibDynamo
</UL>

<P><STRONG><a name="[c8]"></a>showManualSeting</STRONG> (Thumb, 360 bytes, Stack size 16 bytes, main.o(i.showManualSeting))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = showManualSeting &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verEng
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putString
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualSeting
</UL>

<P><STRONG><a name="[ac]"></a>showPG00</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, display.o(i.showPG00))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = showPG00 &rArr; verString &rArr; verEng &rArr; dComd &rArr; wrLcdD &rArr; AccessChar
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verString
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putString
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putHLine
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_Lcd
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFirst
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTest1
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunFirst
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance2
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest2
</UL>

<P><STRONG><a name="[104]"></a>showPG000</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, display.o(i.showPG000))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = showPG000 &rArr; verString &rArr; verEng &rArr; dComd &rArr; wrLcdD &rArr; AccessChar
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verString
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putString
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_Lcd
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dc]"></a>showPGRun1</STRONG> (Thumb, 276 bytes, Stack size 8 bytes, display.o(i.showPGRun1))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = showPGRun1 &rArr; verString &rArr; verEng &rArr; dComd &rArr; wrLcdD &rArr; AccessChar
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verString
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putString
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putHLine
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_Lcd
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTest1
</UL>

<P><STRONG><a name="[c1]"></a>showPG_Manual</STRONG> (Thumb, 354 bytes, Stack size 8 bytes, display.o(i.showPG_Manual))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = showPG_Manual &rArr; verString &rArr; verEng &rArr; dComd &rArr; wrLcdD &rArr; AccessChar
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verString
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putString
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putHLine
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putEng
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_Lcd
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual
</UL>

<P><STRONG><a name="[c3]"></a>showPG_Manual0</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, display.o(i.showPG_Manual0))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = showPG_Manual0 &rArr; verString &rArr; verEng &rArr; dComd &rArr; wrLcdD &rArr; AccessChar
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verString
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verEng
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putString
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putHLine
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_Lcd
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualSeting
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual0
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual
</UL>

<P><STRONG><a name="[e2]"></a>showPID</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, display.o(i.showPID))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = showPID &rArr; verString &rArr; verEng &rArr; dComd &rArr; wrLcdD &rArr; AccessChar
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verString
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putString
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putHLine
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_Lcd
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPID
</UL>

<P><STRONG><a name="[cc]"></a>showPassWord</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, display.o(i.showPassWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = showPassWord &rArr; verString &rArr; verEng &rArr; dComd &rArr; wrLcdD &rArr; AccessChar
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verString
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verEng
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putString
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putHLine
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_Lcd
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassWord
</UL>

<P><STRONG><a name="[d5]"></a>showPerfoSet</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, main.o(i.showPerfoSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = showPerfoSet &rArr; disp_line2 &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_line2
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verString
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putString
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance2
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance1
</UL>

<P><STRONG><a name="[d4]"></a>showPerfomance1</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, display.o(i.showPerfomance1))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = showPerfomance1 &rArr; verString &rArr; verEng &rArr; dComd &rArr; wrLcdD &rArr; AccessChar
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verString
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putString
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putHLine
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putEng
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_Lcd
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance2
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance1
</UL>

<P><STRONG><a name="[d6]"></a>showPerfomance2</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, display.o(i.showPerfomance2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = showPerfomance2 &rArr; verString &rArr; verEng &rArr; dComd &rArr; wrLcdD &rArr; AccessChar
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verString
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putString
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putHLine
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_Lcd
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance2
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance1
</UL>

<P><STRONG><a name="[e7]"></a>showPower</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, display.o(i.showPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = showPower &rArr; verString &rArr; verEng &rArr; dComd &rArr; wrLcdD &rArr; AccessChar
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verString
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putString
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putHLine
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putEng
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_Lcd
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPower
</UL>

<P><STRONG><a name="[a9]"></a>showRun0</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, display.o(i.showRun0))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = showRun0 &rArr; verString &rArr; verEng &rArr; dComd &rArr; wrLcdD &rArr; AccessChar
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verString
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verEng
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putString
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putHLine
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_Lcd
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTest1
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunFirst
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance2
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance1
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual0
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest2
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest1
</UL>

<P><STRONG><a name="[90]"></a>showScale</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, display.o(i.showScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = showScale &rArr; verString &rArr; verEng &rArr; dComd &rArr; wrLcdD &rArr; AccessChar
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verString
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putString
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putHLine
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_Lcd
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibTorque
</UL>

<P><STRONG><a name="[8b]"></a>showSet0</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, display.o(i.showSet0))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = showSet0 &rArr; verString &rArr; verEng &rArr; dComd &rArr; wrLcdD &rArr; AccessChar
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verString
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verEng
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putString
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putHLine
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_Lcd
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPower
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPID
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibDynamo
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFirst
</UL>

<P><STRONG><a name="[ff]"></a>targetInit</STRONG> (Thumb, 334 bytes, Stack size 0 bytes, hal.o(i.targetInit))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>timer0Init</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, hal.o(i.timer0Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timer0Init &rArr; zyIsrSet
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIsrSet
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[102]"></a>uartInit</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, hal.o(i.uartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uartInit &rArr; zyIsrSet
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIsrSet
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[109]"></a>verChin</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, lcd.o(i.verChin))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = verChin &rArr; dComd &rArr; wrLcdD &rArr; AccessChar
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sComd
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dComd
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verString
</UL>

<P><STRONG><a name="[c5]"></a>verEng</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, lcd.o(i.verEng))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = verEng &rArr; dComd &rArr; wrLcdD &rArr; AccessChar
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sComd
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dComd
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showCalib
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayPID
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib03
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassWord
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFirst
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showManualSeting
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showConstSet
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunFirst
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual0
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verString
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showSet0
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showRun0
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPassWord
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPG_Manual0
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showCalib01
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showCalib00
</UL>

<P><STRONG><a name="[89]"></a>verString</STRONG> (Thumb, 150 bytes, Stack size 20 bytes, lcd.o(i.verString))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = verString &rArr; verEng &rArr; dComd &rArr; wrLcdD &rArr; AccessChar
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verEng
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verChin
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayPID
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib03
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPower
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunPID
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibDynamo
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Lcd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPerfoSet
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showConstSet
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTest1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStep
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance2
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoNext
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest2
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showSet0
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showScale
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showRun0
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPower
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPerfomance2
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPerfomance1
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPassWord
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPID
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPG_Manual0
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPG_Manual
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPGRun1
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPG000
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showPG00
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showDynaCalib
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showConstant2
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showConstant1
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showCalib01
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showCalib00
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualSetingDisplay
</UL>

<P><STRONG><a name="[f8]"></a>wrLcdC</STRONG> (Thumb, 234 bytes, Stack size 12 bytes, lcd.o(i.wrLcdC))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = wrLcdC &rArr; AccessChar
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccessChar
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sComd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nComd
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dComd
</UL>

<P><STRONG><a name="[f7]"></a>wrLcdD</STRONG> (Thumb, 244 bytes, Stack size 12 bytes, lcd.o(i.wrLcdD))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = wrLcdD &rArr; AccessChar
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccessChar
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sComd
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dComd
</UL>

<P><STRONG><a name="[be]"></a>zyIsrSet</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, i2c.o(i.zyIsrSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = zyIsrSet
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIrqEnable
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zyIrqDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
</UL>

<P><STRONG><a name="[44]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[37]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[9c]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPID
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibTorque
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaAccess
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTest1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStep
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance2
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerforStep
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualSeting
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoadProg2
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataAccess
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest1
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_Proccesse
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_tune
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_calc
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[10d]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[110]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[115]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[b3]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerforStep
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataAccess
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_tune
</UL>

<P><STRONG><a name="[112]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[ee]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[114]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[b9]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaAccess
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualSeting
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoadProg2
</UL>

<P><STRONG><a name="[116]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[97]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibTorque
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTest1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStep
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance2
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerforStep
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataAccess
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_Proccesse
</UL>

<P><STRONG><a name="[117]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[11a]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoadProg2
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataAccess
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_calc
</UL>

<P><STRONG><a name="[118]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[10f]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[113]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[98]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibTorque
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTest1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStep
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance2
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerforStep
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_Proccesse
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[119]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showCalib
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayPID2
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayPID
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPower
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPID
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibTorque
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibDynamo
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showManualSeting
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showConstSet
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_out
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_line2
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartMotor
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTest1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStep
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance2
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerforStep
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualSeting
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoNext
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPG11
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPG00
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataAccess
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest1
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_Proccesse
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_tune
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_calc
</UL>

<P><STRONG><a name="[11b]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[cf]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartMotor
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTest1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStep
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance2
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerforStep
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_Proccesse
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_Isr
</UL>

<P><STRONG><a name="[11d]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[121]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[91]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibTorque
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_out
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartMotor
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTest1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStep
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance2
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerforStep
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoNext
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPG11
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataAccess
</UL>

<P><STRONG><a name="[11f]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[95]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibTorque
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaAccess
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showConstSet
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_out
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTest1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStep
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerforStep
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoNext
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoadProg2
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataAccess
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest2
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest1
</UL>

<P><STRONG><a name="[120]"></a>_fcmpeq</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibTorque
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaAccess
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartMotor
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTest1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStep
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMotor
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance2
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerforStep
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualSeting
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoadProg2
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest2
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_Proccesse
</UL>

<P><STRONG><a name="[122]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[a6]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaAccess
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoadProg2
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest1
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_Isr
</UL>

<P><STRONG><a name="[166]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[b4]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPID
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunPID
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaAccess
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showManualSeting
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_out
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartMotor
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTest1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStep
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Performance2
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerforStep
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualSeting
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoNext
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPG11
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ResultV
</UL>

<P><STRONG><a name="[167]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[92]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibTorque
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_out
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStep
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerforStep
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataAccess
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest1
</UL>

<P><STRONG><a name="[123]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[126]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibTorque
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaAccess
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStep
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMotor
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerforStep
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoadProg2
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataAccess
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_Proccesse
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_tune
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_Isr
</UL>

<P><STRONG><a name="[124]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[11c]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[10e]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaAccess
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMotor
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoadProg2
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataAccess
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConstantTest1
</UL>

<P><STRONG><a name="[125]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[ce]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_bumpless
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartMotor
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStep
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerforStep
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_Proccesse
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_calc
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_Isr
</UL>

<P><STRONG><a name="[127]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[3d]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[111]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[ea]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>

<P><STRONG><a name="[69]"></a>_scanf_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf1.o(x$fpl$scanf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[75]"></a>_scanf_hex_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _scanf_hex_real &rArr; _scanf_really_hex_real &rArr; __support_ldexp &rArr; ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[74]"></a>_scanf_infnan</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_infnan &rArr; _scanf_really_infnan
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[129]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[128]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[11e]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[5f]"></a>_fp_digits</STRONG> (Thumb, 428 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[33]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[68]"></a>_local_sscanf</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[70]"></a>_fp_value</STRONG> (Thumb, 508 bytes, Stack size 88 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
